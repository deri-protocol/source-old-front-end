// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { perpetualPoolRouterAbi } from '../abi/perpetualPoolRouterAbi.js'

export class PerpetualPoolRouter extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, perpetualPoolRouterAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  async controller() {
    const res = await this._call('controller', [])
    return deleteIndexedKey(res)
  }
  //  async liquidatorQualifier() {
  //    const res = await this._call('liquidatorQualifier', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async migrationDestination() {
  //    const res = await this._call('migrationDestination', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async migrationTimestamp() {
  //    const res = await this._call('migrationTimestamp', [])
  //    return deleteIndexedKey(res)
  //  }
  async pool() {
    const res = await this._call('pool', [])
    return deleteIndexedKey(res)
  }

  // tx
  //  async addBToken(accountAddress, bTokenAddress, swapperAddress, oracleAddress, discount) {
  //    return await this._transact('addBToken', [bTokenAddress, swapperAddress, oracleAddress, discount], accountAddress)
  //  }
  async addLiquidity(accountAddress, bTokenId, bAmount) {
    return await this._transact('addLiquidity', [bTokenId, bAmount], accountAddress)
  }
  async addLiquidityWithPrices(accountAddress, bTokenId, bAmount, infos) {
    return await this._transact('addLiquidityWithPrices', [bTokenId, bAmount, infos], accountAddress)
  }
  async addMargin(accountAddress, bTokenId, bAmount) {
    return await this._transact('addMargin', [bTokenId, bAmount], accountAddress)
  }
  async addMarginWithPrices(accountAddress, bTokenId, bAmount, infos) {
    return await this._transact('addMarginWithPrices', [bTokenId, bAmount, infos], accountAddress)
  }
  //  async addSymbol(accountAddress, symbol, oracleAddress, multiplier, feeRatio, alpha) {
  //    return await this._transact('addSymbol', [symbol, oracleAddress, multiplier, feeRatio, alpha], accountAddress)
  //  }
  //  async approveMigration(accountAddress) {
  //    return await this._transact('approveMigration', [], accountAddress)
  //  }
  //  async claimNewController(accountAddress) {
  //    return await this._transact('claimNewController', [], accountAddress)
  //  }
  //  async executeMigration(accountAddress, sourceRouter) {
  //    return await this._transact('executeMigration', [sourceRouter], accountAddress)
  //  }
  //  async executeMigrationWithTimestamp(accountAddress, sourceRouter, lastTimestamp) {
  //    return await this._transact('executeMigrationWithTimestamp', [sourceRouter, lastTimestamp], accountAddress)
  //  }
  async liquidate(accountAddress, trader) {
    return await this._transact('liquidate', [trader], accountAddress)
  }
  async liquidateWithPrices(accountAddress, trader, infos) {
    return await this._transact('liquidateWithPrices', [trader, infos], accountAddress)
  }
  //  async prepareMigration(accountAddress, target, graceDays) {
  //    return await this._transact('prepareMigration', [target, graceDays], accountAddress)
  //  }
  async removeLiquidity(accountAddress, bTokenId, bAmount) {
    return await this._transact('removeLiquidity', [bTokenId, bAmount], accountAddress)
  }
  async removeLiquidityWithPrices(accountAddress, bTokenId, bAmount, infos) {
    return await this._transact('removeLiquidityWithPrices', [bTokenId, bAmount, infos], accountAddress)
  }
  async removeMargin(accountAddress, bTokenId, bAmount) {
    return await this._transact('removeMargin', [bTokenId, bAmount], accountAddress)
  }
  async removeMarginWithPrices(accountAddress, bTokenId, bAmount, infos) {
    return await this._transact('removeMarginWithPrices', [bTokenId, bAmount, infos], accountAddress)
  }
  //  async setBTokenParameters(accountAddress, bTokenId, swapperAddress, oracleAddress, discount) {
  //    return await this._transact('setBTokenParameters', [bTokenId, swapperAddress, oracleAddress, discount], accountAddress)
  //  }
  //  async setLiquidatorQualifier(accountAddress, qualifierAddress) {
  //    return await this._transact('setLiquidatorQualifier', [qualifierAddress], accountAddress)
  //  }
  //  async setNewController(accountAddress, newController) {
  //    return await this._transact('setNewController', [newController], accountAddress)
  //  }
  //  async setPool(accountAddress, poolAddress) {
  //    return await this._transact('setPool', [poolAddress], accountAddress)
  //  }
  //  async setSymbolParameters(accountAddress, symbolId, oracleAddress, feeRatio, alpha) {
  //    return await this._transact('setSymbolParameters', [symbolId, oracleAddress, feeRatio, alpha], accountAddress)
  //  }
  async trade(accountAddress, symbolId, tradeVolume) {
    return await this._transact('trade', [symbolId, tradeVolume], accountAddress)
  }
  async tradeWithPrices(accountAddress, symbolId, tradeVolume, infos) {
    return await this._transact('tradeWithPrices', [symbolId, tradeVolume, infos], accountAddress)
  }

}