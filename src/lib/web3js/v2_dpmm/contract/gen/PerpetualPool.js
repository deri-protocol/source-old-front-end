// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { perpetualPoolAbi } from '../abi/perpetualPoolAbi.js'

export class PerpetualPool extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, perpetualPoolAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  async getAddresses() {
    const res = await this._call('getAddresses', [])
    return deleteIndexedKey(res)
  }
  async getBToken(bTokenId) {
    const res = await this._call('getBToken', [bTokenId])
    return deleteIndexedKey(res)
  }
  async getLengths() {
    const res = await this._call('getLengths', [])
    return deleteIndexedKey(res)
  }
  async getParameters() {
    const res = await this._call('getParameters', [])
    return deleteIndexedKey(res)
  }
  async getPoolStateValues() {
    const res = await this._call('getPoolStateValues', [])
    return deleteIndexedKey(res)
  }
  async getSymbol(symbolId) {
    const res = await this._call('getSymbol', [symbolId])
    return deleteIndexedKey(res)
  }
  //  async getSymbolOracle(symbolId) {
  //    const res = await this._call('getSymbolOracle', [symbolId])
  //    return deleteIndexedKey(res)
  //  }

  // tx
  //  async addBToken(accountAddress, info) {
  //    return await this._transact('addBToken', [info], accountAddress)
  //  }
  //  async addLiquidity(accountAddress, lp, bTokenId, bAmount) {
  //    return await this._transact('addLiquidity', [lp, bTokenId, bAmount], accountAddress)
  //  }
  //  async addMargin(accountAddress, trader, bTokenId, bAmount) {
  //    return await this._transact('addMargin', [trader, bTokenId, bAmount], accountAddress)
  //  }
  //  async addSymbol(accountAddress, info) {
  //    return await this._transact('addSymbol', [info], accountAddress)
  //  }
  //  async approveBTokenForTargetPool(accountAddress, bTokenId, targetPool) {
  //    return await this._transact('approveBTokenForTargetPool', [bTokenId, targetPool], accountAddress)
  //  }
  //  async collectProtocolFee(accountAddress) {
  //    return await this._transact('collectProtocolFee', [], accountAddress)
  //  }
  //  async liquidate(accountAddress, liquidator, trader) {
  //    return await this._transact('liquidate', [liquidator, trader], accountAddress)
  //  }
  //  async migrateBToken(accountAddress, sourcePool, balance, bTokenAddress, swapperAddress, oracleAddress, decimals, discount, liquidity, pnl, cumulativePnl) {
  //    return await this._transact('migrateBToken', [sourcePool, balance, bTokenAddress, swapperAddress, oracleAddress, decimals, discount, liquidity, pnl, cumulativePnl], accountAddress)
  //  }
  //  async migratePoolStateValues(accountAddress, lastTimestamp, protocolFeeAccrued) {
  //    return await this._transact('migratePoolStateValues', [lastTimestamp, protocolFeeAccrued], accountAddress)
  //  }
  //  async migrateSymbol(accountAddress, symbol, oracleAddress, multiplier, feeRatio, alpha, distributedUnrealizedPnl, tradersNetVolume, tradersNetCost, cumulativeFundingRate) {
  //    return await this._transact('migrateSymbol', [symbol, oracleAddress, multiplier, feeRatio, alpha, distributedUnrealizedPnl, tradersNetVolume, tradersNetCost, cumulativeFundingRate], accountAddress)
  //  }
  //  async removeLiquidity(accountAddress, lp, bTokenId, bAmount) {
  //    return await this._transact('removeLiquidity', [lp, bTokenId, bAmount], accountAddress)
  //  }
  //  async removeMargin(accountAddress, trader, bTokenId, bAmount) {
  //    return await this._transact('removeMargin', [trader, bTokenId, bAmount], accountAddress)
  //  }
  //  async setBTokenParameters(accountAddress, bTokenId, swapperAddress, oracleAddress, discount) {
  //    return await this._transact('setBTokenParameters', [bTokenId, swapperAddress, oracleAddress, discount], accountAddress)
  //  }
  //  async setPoolForLTokenAndPToken(accountAddress, targetPool) {
  //    return await this._transact('setPoolForLTokenAndPToken', [targetPool], accountAddress)
  //  }
  //  async setSymbolParameters(accountAddress, symbolId, oracleAddress, feeRatio, alpha) {
  //    return await this._transact('setSymbolParameters', [symbolId, oracleAddress, feeRatio, alpha], accountAddress)
  //  }
  //  async trade(accountAddress, trader, symbolId, tradeVolume) {
  //    return await this._transact('trade', [trader, symbolId, tradeVolume], accountAddress)
  //  }

}