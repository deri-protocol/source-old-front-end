// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { pancakePairAbi } from '../abi/pancakePairAbi.js'

export class PancakePair extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, pancakePairAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  //  async DOMAIN_SEPARATOR() {
  //    const res = await this._call('DOMAIN_SEPARATOR', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async MINIMUM_LIQUIDITY() {
  //    const res = await this._call('MINIMUM_LIQUIDITY', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async PERMIT_TYPEHASH() {
  //    const res = await this._call('PERMIT_TYPEHASH', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async allowance(, ) {
  //    const res = await this._call('allowance', [, ])
  //    return deleteIndexedKey(res)
  //  }
  //  async balanceOf() {
  //    const res = await this._call('balanceOf', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async decimals() {
  //    const res = await this._call('decimals', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async factory() {
  //    const res = await this._call('factory', [])
  //    return deleteIndexedKey(res)
  //  }
  async getReserves() {
    const res = await this._call('getReserves', [])
    return deleteIndexedKey(res)
  }
  //  async kLast() {
  //    const res = await this._call('kLast', [])
  //    return deleteIndexedKey(res)
  //  }
  async name() {
    const res = await this._call('name', [])
    return deleteIndexedKey(res)
  }
  //  async nonces() {
  //    const res = await this._call('nonces', [])
  //    return deleteIndexedKey(res)
  //  }
  async price0CumulativeLast() {
    const res = await this._call('price0CumulativeLast', [])
    return deleteIndexedKey(res)
  }
  async price1CumulativeLast() {
    const res = await this._call('price1CumulativeLast', [])
    return deleteIndexedKey(res)
  }
  //  async symbol() {
  //    const res = await this._call('symbol', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async token0() {
  //    const res = await this._call('token0', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async token1() {
  //    const res = await this._call('token1', [])
  //    return deleteIndexedKey(res)
  //  }
  async totalSupply() {
    const res = await this._call('totalSupply', [])
    return deleteIndexedKey(res)
  }

  // tx
  //  async approve(accountAddress, spender, value) {
  //    return await this._transact('approve', [spender, value], accountAddress)
  //  }
  //  async burn(accountAddress, to) {
  //    return await this._transact('burn', [to], accountAddress)
  //  }
  //  async initialize(accountAddress, _token0, _token1) {
  //    return await this._transact('initialize', [_token0, _token1], accountAddress)
  //  }
  //  async mint(accountAddress, to) {
  //    return await this._transact('mint', [to], accountAddress)
  //  }
  //  async permit(accountAddress, owner, spender, value, deadline, v, r, s) {
  //    return await this._transact('permit', [owner, spender, value, deadline, v, r, s], accountAddress)
  //  }
  //  async skim(accountAddress, to) {
  //    return await this._transact('skim', [to], accountAddress)
  //  }
  //  async swap(accountAddress, amount0Out, amount1Out, to, data) {
  //    return await this._transact('swap', [amount0Out, amount1Out, to, data], accountAddress)
  //  }
  //  async sync(accountAddress) {
  //    return await this._transact('sync', [], accountAddress)
  //  }
  //  async transfer(accountAddress, to, value) {
  //    return await this._transact('transfer', [to, value], accountAddress)
  //  }
  //  async transferFrom(accountAddress, from, to, value) {
  //    return await this._transact('transferFrom', [from, to, value], accountAddress)
  //  }

}