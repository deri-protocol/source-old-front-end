// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils'
import { currencyVaultAbi } from '../abi/currencyVaultAbi.js'

export class CurrencyVault extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, currencyVaultAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  //  async CLAIM_TYPEHASH() {
  //    const res = await this._call('CLAIM_TYPEHASH', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async DOMAIN_TYPEHASH() {
  //    const res = await this._call('DOMAIN_TYPEHASH', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async chainId() {
  //    const res = await this._call('chainId', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async contractName() {
  //    const res = await this._call('contractName', [])
  //    return deleteIndexedKey(res)
  //  }
  async contractVersion() {
    const res = await this._call('contractVersion', [])
    return deleteIndexedKey(res)
  }
  //  async controller() {
  //    const res = await this._call('controller', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async getCurrencyBalance() {
  //    const res = await this._call('getCurrencyBalance', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async getTokenBalance(tokenAddress) {
  //    const res = await this._call('getTokenBalance', [tokenAddress])
  //    return deleteIndexedKey(res)
  //  }
  //  async usedHash() {
  //    const res = await this._call('usedHash', [])
  //    return deleteIndexedKey(res)
  //  }

  // tx
  async claim(accountAddress, account, amount, deadline, nonce, v, r, s) {
    return await this._transact('claim', [account, amount, deadline, nonce, v, r, s], accountAddress)
  }
  //  async claimNewController(accountAddress) {
  //    return await this._transact('claimNewController', [], accountAddress)
  //  }
  //  async setNewController(accountAddress, newController) {
  //    return await this._transact('setNewController', [newController], accountAddress)
  //  }
  //  async withdrawTotalCurrency(accountAddress) {
  //    return await this._transact('withdrawTotalCurrency', [], accountAddress)
  //  }
  //  async withdrawTotalToken(accountAddress, tokenAddress) {
  //    return await this._transact('withdrawTotalToken', [tokenAddress], accountAddress)
  //  }

}