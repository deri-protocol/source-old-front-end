// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils'
import { deriVoteAbi } from '../abi/deriVoteAbi.js'

export class DeriVote extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, deriVoteAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  async controller() {
    const res = await this._call('controller', [])
    return deleteIndexedKey(res)
  }
  async name() {
    const res = await this._call('name', [])
    return deleteIndexedKey(res)
  }
  async numVotingOptions() {
    const res = await this._call('numVotingOptions', [])
    return deleteIndexedKey(res)
  }
  async votingDeadline() {
    const res = await this._call('votingDeadline', [])
    return deleteIndexedKey(res)
  }
  async votingId() {
    const res = await this._call('votingId', [])
    return deleteIndexedKey(res)
  }
  async votingOptions(votingId, voter) {
    const res = await this._call("votingOptions", [votingId, voter]);
    return deleteIndexedKey(res);
  }
  async votingTopics(votingId) {
    const res = await this._call('votingTopics', [votingId])
    return deleteIndexedKey(res)
  }

  // tx
  //  async initializeVote(accountAddress, topic, nOptions, deadline) {
  //    return await this._transact('initializeVote', [topic, nOptions, deadline], accountAddress)
  //  }
  //  async setController(accountAddress, newController) {
  //    return await this._transact('setController', [newController], accountAddress)
  //  }
  async vote(accountAddress, votingOption) {
    return await this._transact('vote', [votingOption], accountAddress)
  }

}