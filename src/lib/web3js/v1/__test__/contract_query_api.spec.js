import { getEstimatedFee, getEstimatedFundingRate, getEstimatedLiquidityUsed, getEstimatedMargin, getFundingRate, getLiquidityInfo, getLiquidityUsed, getPositionInfo, getSpecification, getWalletBalance } from "../api/contract_query_api"
import { ACCOUNT_ADDRESS, chainId, poolAddress, TIMEOUT } from "./setup"
import { bg } from '../../shared/utils'

describe('contract query api', () => {
  test('getSpecification', async() => {
    const res = await getSpecification(chainId, poolAddress)
    expect(res).toHaveProperty('multiplier')
    expect(res).toHaveProperty('feeRatio')
    expect(res).toHaveProperty('minPoolMarginRatio')
    expect(res).toHaveProperty('minMaintenanceMarginRatio')
    expect(res).toHaveProperty('minInitialMarginRatio')
    expect(res).toHaveProperty('fundingRateCoefficient')
    expect(res.symbol).toEqual('BTCUSD')
    expect(res.bTokenSymbol).toEqual('BUSD')
  }, TIMEOUT)
  test('getPositionInfo', async() => {
    const res = await getPositionInfo(chainId, poolAddress, ACCOUNT_ADDRESS)
    expect(res).toHaveProperty('margin')
    expect(res).toHaveProperty('marginHeld')
    expect(res).toHaveProperty('unrealizedPnl')
    expect(res).toHaveProperty('liquidationPrice')
    expect(res).toHaveProperty('price')
    expect(bg(res.volume).toNumber()).toBeGreaterThan(15)
    expect(bg(res.price).toNumber()).toBeGreaterThan(30000)
    expect(bg(res.margin).toNumber()).toBeGreaterThan(100)
    expect(bg(res.unrealizedPnl).toNumber()).toBeGreaterThan(-0.9)
    //expect(res).toEqual({})
  }, TIMEOUT)
  test('getLiquidityInfo', async() => {
    //DeriEnv.set('prod')
    //const res = await getLiquidityInfo(chainId, poolAddress, ACCOUNT_ADDRESS)
    const res = await getLiquidityInfo(chainId, poolAddress, ACCOUNT_ADDRESS)
    //DeriEnv.set('dev')
    expect(res).toHaveProperty('totalSupply')
    expect(res).toHaveProperty('poolLiquidity')
    expect(res).toHaveProperty('shares')
    expect(res).toHaveProperty('shareValue')
    expect(res).toHaveProperty('maxRemovableShares')
    expect(bg(res.shareValue).toNumber()).toBeGreaterThan(0.5)
    expect(bg(res.shares).toNumber()).toBeGreaterThan(100)
    expect(bg(res.poolLiquidity).toNumber()).toBeGreaterThan(500)
    expect(bg(res.totalSupply).toNumber()).toBeGreaterThan(500)
    //expect(res).toEqual({})
  }, TIMEOUT)
  test('getWalletBalance', async() => {
    const res = await getWalletBalance(chainId, poolAddress, ACCOUNT_ADDRESS)
    expect(bg(res).toNumber()).toBeGreaterThan(100)
  }, TIMEOUT)
  test('getEstimatedMargin', async() => {
    const res = await getEstimatedMargin(chainId, poolAddress, ACCOUNT_ADDRESS, '100', 10)
    expect(bg(res).toNumber()).toBeGreaterThan(30)
    expect(bg(res).toNumber()).toBeLessThan(60)
  }, TIMEOUT)
  test('getEstimatedFee', async() => {
    const res = await getEstimatedFee(chainId, poolAddress, '100')
    expect(bg(res).toNumber()).toBeGreaterThan(0.5)
    expect(bg(res).toNumber()).toBeLessThan(1)
  }, TIMEOUT)
  test('getFundingRate', async() => {
    const res = await getFundingRate(chainId, poolAddress)
    //console.log('res', res)
    expect(res).toHaveProperty('fundingRate0')
    expect(res).toHaveProperty('fundingRatePerBlock')
    expect(res).toHaveProperty('liquidity')
    expect(res).toHaveProperty('volume')
    expect(res).toHaveProperty('tradersNetVolume')
    expect(bg(res.liquidity).toNumber()).toBeGreaterThan(500)
    expect(bg(res.fundingRatePerBlock).toNumber()).toBeLessThan(0.00005)
  }, TIMEOUT)
  test('getEstimatedFundingRate', async() => {
    const res = await getEstimatedFundingRate(chainId, poolAddress, '10')
    expect(res).toHaveProperty('fundingRate1')
    expect(bg(res.fundingRate1).toNumber()).toBeLessThan(0.00005)
  }, TIMEOUT)
  test('getLiquidityUsed', async() => {
    const res = await getLiquidityUsed(chainId, poolAddress)
    expect(res).toHaveProperty('liquidityUsed0')
    expect(res.liquidityUsed0).toEqual('0.0000%')
  }, TIMEOUT)
  test('getEstimatedLiquidityUsed', async() => {
    const res = await getEstimatedLiquidityUsed(chainId, poolAddress, '100')
    //console.log('res', res)
    expect(res).toHaveProperty('liquidityUsed1')
    expect(res.liquidityUsed1).toEqual('0')
  }, TIMEOUT)
})