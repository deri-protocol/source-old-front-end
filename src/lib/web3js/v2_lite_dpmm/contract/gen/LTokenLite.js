// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { lTokenLiteAbi } from '../abi/lTokenLiteAbi.js'

export class LTokenLite extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, lTokenLiteAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  //  async allowance(owner, spender) {
  //    const res = await this._call('allowance', [owner, spender])
  //    return deleteIndexedKey(res)
  //  }
  async balanceOf(account) {
    const res = await this._call('balanceOf', [account])
    return deleteIndexedKey(res)
  }
  //  async decimals() {
  //    const res = await this._call('decimals', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async name() {
  //    const res = await this._call('name', [])
  //    return deleteIndexedKey(res)
  //  }
  async pool() {
    const res = await this._call('pool', [])
    return deleteIndexedKey(res)
  }
  //  async symbol() {
  //    const res = await this._call('symbol', [])
  //    return deleteIndexedKey(res)
  //  }
  async totalSupply() {
    const res = await this._call('totalSupply', [])
    return deleteIndexedKey(res)
  }

  // tx
  //  async approve(accountAddress, spender, amount) {
  //    return await this._transact('approve', [spender, amount], accountAddress)
  //  }
  //  async burn(accountAddress, account, amount) {
  //    return await this._transact('burn', [account, amount], accountAddress)
  //  }
  //  async mint(accountAddress, account, amount) {
  //    return await this._transact('mint', [account, amount], accountAddress)
  //  }
  //  async setPool(accountAddress, newPool) {
  //    return await this._transact('setPool', [newPool], accountAddress)
  //  }
  //  async transfer(accountAddress, to, amount) {
  //    return await this._transact('transfer', [to, amount], accountAddress)
  //  }
  //  async transferFrom(accountAddress, from, to, amount) {
  //    return await this._transact('transferFrom', [from, to, amount], accountAddress)
  //  }

}