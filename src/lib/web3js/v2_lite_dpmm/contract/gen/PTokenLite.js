// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { pTokenLiteAbi } from '../abi/pTokenLiteAbi.js'

export class PTokenLite extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, pTokenLiteAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  async balanceOf(owner) {
    const res = await this._call('balanceOf', [owner])
    return deleteIndexedKey(res)
  }
  async exists(owner) {
    const res = await this._call('exists', [owner])
    return deleteIndexedKey(res)
  }
  async getActiveSymbolIds() {
    const res = await this._call('getActiveSymbolIds', [])
    return deleteIndexedKey(res)
  }
  //  async getApproved(tokenId) {
  //    const res = await this._call('getApproved', [tokenId])
  //    return deleteIndexedKey(res)
  //  }
  async getMargin(owner) {
    const res = await this._call('getMargin', [owner])
    return deleteIndexedKey(res)
  }
  async getNumPositionHolders(symbolId) {
    const res = await this._call('getNumPositionHolders', [symbolId])
    return deleteIndexedKey(res)
  }
  async getPosition(owner, symbolId) {
    const res = await this._call('getPosition', [owner, symbolId])
    return deleteIndexedKey(res)
  }
  //  async getTokenId(owner) {
  //    const res = await this._call('getTokenId', [owner])
  //    return deleteIndexedKey(res)
  //  }
  async isActiveSymbolId(symbolId) {
    const res = await this._call('isActiveSymbolId', [symbolId])
    return deleteIndexedKey(res)
  }
  //  async isApprovedForAll(owner, operator) {
  //    const res = await this._call('isApprovedForAll', [owner, operator])
  //    return deleteIndexedKey(res)
  //  }
  //  async name() {
  //    const res = await this._call('name', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async ownerOf(tokenId) {
  //    const res = await this._call('ownerOf', [tokenId])
  //    return deleteIndexedKey(res)
  //  }
  async pool() {
    const res = await this._call('pool', [])
    return deleteIndexedKey(res)
  }
  //  async supportsInterface(interfaceId) {
  //    const res = await this._call('supportsInterface', [interfaceId])
  //    return deleteIndexedKey(res)
  //  }
  //  async symbol() {
  //    const res = await this._call('symbol', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async totalMinted() {
  //    const res = await this._call('totalMinted', [])
  //    return deleteIndexedKey(res)
  //  }
  async totalSupply() {
    const res = await this._call('totalSupply', [])
    return deleteIndexedKey(res)
  }

  // tx
  //  async addMargin(accountAddress, owner, delta) {
  //    return await this._transact('addMargin', [owner, delta], accountAddress)
  //  }
  //  async addSymbolId(accountAddress, symbolId) {
  //    return await this._transact('addSymbolId', [symbolId], accountAddress)
  //  }
  //  async approve(accountAddress, operator, tokenId) {
  //    return await this._transact('approve', [operator, tokenId], accountAddress)
  //  }
  //  async burn(accountAddress, owner) {
  //    return await this._transact('burn', [owner], accountAddress)
  //  }
  //  async mint(accountAddress, owner) {
  //    return await this._transact('mint', [owner], accountAddress)
  //  }
  //  async removeSymbolId(accountAddress, symbolId) {
  //    return await this._transact('removeSymbolId', [symbolId], accountAddress)
  //  }
  //  async safeTransferFrom(accountAddress, from, to, tokenId) {
  //    return await this._transact('safeTransferFrom', [from, to, tokenId], accountAddress)
  //  }
  //  async safeTransferFrom(accountAddress, from, to, tokenId, data) {
  //    return await this._transact('safeTransferFrom', [from, to, tokenId, data], accountAddress)
  //  }
  //  async setApprovalForAll(accountAddress, operator, approved) {
  //    return await this._transact('setApprovalForAll', [operator, approved], accountAddress)
  //  }
  //  async setPool(accountAddress, newPool) {
  //    return await this._transact('setPool', [newPool], accountAddress)
  //  }
  //  async toggleCloseOnly(accountAddress, symbolId) {
  //    return await this._transact('toggleCloseOnly', [symbolId], accountAddress)
  //  }
  //  async transferFrom(accountAddress, from, to, tokenId) {
  //    return await this._transact('transferFrom', [from, to, tokenId], accountAddress)
  //  }
  //  async updateMargin(accountAddress, owner, margin) {
  //    return await this._transact('updateMargin', [owner, margin], accountAddress)
  //  }
  //  async updatePosition(accountAddress, owner, symbolId, position) {
  //    return await this._transact('updatePosition', [owner, symbolId, position], accountAddress)
  //  }

}