// this file is generated by script, don't modify it !!!
import { ContractBase } from '../../../shared/contract/contract_base.js'
import { deleteIndexedKey } from '../../../shared/utils/web3.js'
import { perpetualPoolLiteAbi } from '../abi/perpetualPoolLiteAbi.js'

export class PerpetualPoolLite extends ContractBase {
  // init
  constructor(chainId, contractAddress, initialBlock) {
    super(chainId, contractAddress, perpetualPoolLiteAbi)
    // for pool use
    if (initialBlock) {
      this.initialBlock = initialBlock
    }
  }

  // query
  //  async controller() {
  //    const res = await this._call('controller', [])
  //    return deleteIndexedKey(res)
  //  }
  async getAddresses() {
    const res = await this._call('getAddresses', [])
    return deleteIndexedKey(res)
  }
   async getFundingPeriod() {
     const res = await this._call('getFundingPeriod', [])
     return deleteIndexedKey(res)
   }
  async getParameters() {
    const res = await this._call('getParameters', [])
    return deleteIndexedKey(res)
  }
  async getPoolStateValues() {
    const res = await this._call('getPoolStateValues', [])
    return deleteIndexedKey(res)
  }
  async getSymbol(symbolId) {
    const res = await this._call('getSymbol', [symbolId])
    return deleteIndexedKey(res)
  }
  //  async migrationDestination() {
  //    const res = await this._call('migrationDestination', [])
  //    return deleteIndexedKey(res)
  //  }
  //  async migrationTimestamp() {
  //    const res = await this._call('migrationTimestamp', [])
  //    return deleteIndexedKey(res)
  //  }

  // tx
  async addLiquidity(accountAddress, bAmount, prices) {
    return await this._transact('addLiquidity', [bAmount, prices], accountAddress)
  }
  async addMargin(accountAddress, bAmount) {
    return await this._transact('addMargin', [bAmount], accountAddress)
  }
  //  async addSymbol(accountAddress, symbolId, symbol, oracleAddress, multiplier, feeRatio, alpha) {
  //    return await this._transact('addSymbol', [symbolId, symbol, oracleAddress, multiplier, feeRatio, alpha], accountAddress)
  //  }
  //  async approveMigration(accountAddress) {
  //    return await this._transact('approveMigration', [], accountAddress)
  //  }
  //  async claimNewController(accountAddress) {
  //    return await this._transact('claimNewController', [], accountAddress)
  //  }
  //  async collectProtocolFee(accountAddress) {
  //    return await this._transact('collectProtocolFee', [], accountAddress)
  //  }
  //  async executeMigration(accountAddress, source) {
  //    return await this._transact('executeMigration', [source], accountAddress)
  //  }
  //  async executeMigrationSwitchToTimestamp(accountAddress, source, lastBlockNumber, lastBlockTimestamp) {
  //    return await this._transact('executeMigrationSwitchToTimestamp', [source, lastBlockNumber, lastBlockTimestamp], accountAddress)
  //  }
  //  async liquidate(accountAddress, account, prices) {
  //    return await this._transact('liquidate', [account, prices], accountAddress)
  //  }
  //  async prepareMigration(accountAddress, target, graceDays) {
  //    return await this._transact('prepareMigration', [target, graceDays], accountAddress)
  //  }
  async removeLiquidity(accountAddress, lShares, prices) {
    return await this._transact('removeLiquidity', [lShares, prices], accountAddress)
  }
  async removeMargin(accountAddress, bAmount, prices) {
    return await this._transact('removeMargin', [bAmount, prices], accountAddress)
  }
  //  async removeSymbol(accountAddress, symbolId) {
  //    return await this._transact('removeSymbol', [symbolId], accountAddress)
  //  }
  //  async setFundingPeriod(accountAddress, period) {
  //    return await this._transact('setFundingPeriod', [period], accountAddress)
  //  }
  //  async setNewController(accountAddress, newController) {
  //    return await this._transact('setNewController', [newController], accountAddress)
  //  }
  //  async setSymbolParameters(accountAddress, symbolId, oracleAddress, feeRatio, alpha) {
  //    return await this._transact('setSymbolParameters', [symbolId, oracleAddress, feeRatio, alpha], accountAddress)
  //  }
  //  async toggleCloseOnly(accountAddress, symbolId) {
  //    return await this._transact('toggleCloseOnly', [symbolId], accountAddress)
  //  }
  async trade(accountAddress, symbolId, tradeVolume, prices) {
    return await this._transact('trade', [symbolId, tradeVolume, prices], accountAddress)
  }

}